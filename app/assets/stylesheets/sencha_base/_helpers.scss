// For image replacement
.ir {
  display: block;
  overflow: hidden;
  background-repeat: no-repeat;
  text-align: left;
  text-indent: -999em;
  direction: ltr;
  width: 0;
}

.visually-hidden {
  position: absolute;
  margin: -1px;
  padding: 0;
  height: 1px;
  width: 1px;
  overflow: hidden;
  border: 0;
  clip: rect(0 0 0 0);
}

.visually-hidden.focusable:active, 
.visually-hidden.focusable:focus {
  position: static;
  margin: 0;
  height: auto;
  width: auto ;
  overflow: visible;
  clip: auto;
}

@mixin visually-hidden {
  position: absolute;
  margin: -1px;
  padding: 0;
  height: 1px;
  width: 1px;
  overflow: hidden;
  border: 0;
  clip: rect(0 0 0 0);

  &.focusable:active,
  &.focusable:focus {
    position: static;
    margin: 0;
    height: auto;
    width: auto ;
    overflow: visible;
    clip: auto;
  }
}


.clearfix:after {
  clear: both;
  content: ' ';
  display: block;
  font-size: 0;
  line-height: 0;
  visibility: hidden;
  width: 0;
  height: 0;
}

.clearfix {
  display: block;
}

* html .clearfix {
  height: 1%;
}

@mixin border-radius($rad) {
  -moz-border-radius: $rad;
  -webkit-border-radius: $rad;
  -o-border-radius: $rad;
  -ms-border-radius: $rad;
  -khtml-border-radius: $rad;
  border-radius: $rad;
}

@mixin background-clip {
  -moz-background-clip: padding;
  -webkit-background-clip: padding;
  -o-background-clip: padding-box;
  -ms-background-clip: padding-box;
  -khtml-background-clip: padding-box;
  background-clip: padding-box;
}

@mixin btm-right-rounded-border($rad) {
  -webkit-border-bottom-right-radius: $rad;
  -moz-border-bottom-right-radius: $rad;
  border-bottom-right-radius: $rad;
}

@mixin btm-left-rounded-border($rad) {
  -webkit-border-bottom-left-radius: $rad;    
  -moz-border-bottom-left-radius: $rad;
  border-bottom-left-radius: $rad;
}

@mixin top-left-rounded-border($rad) {
  -webkit-border-top-left-radius: $rad;    
  -moz-border-top-left-radius: $rad;
  border-top-left-radius: $rad;
}

@mixin topside_rounded_border($hrad, $vrad) {
  -webkit-border-top-left-radius: $hrad $vrad;
  -webkit-border-top-right-radius: $hrad $vrad;    
  -moz-border-top-left-radius: $hrad $vrad;
  -moz-border-top-right-radius: $hrad $vrad;
  border-top-left-radius: $hrad $vrad;
  border-top-right-radius: $hrad $vrad;
}

@mixin box-shadow($horz, $vert, $blur, $color) {
  -webkit-box-shadow: $horz $vert $blur $color;
  -moz-box-shadow: $horz $vert $blur $color;
  box-shadow: $horz $vert $blur $color;
}

@mixin transition($property, $duration, $ease) {
  -webkit-transition: $property $duration $ease;
  -moz-transition: $property $duration $ease;
  -o-transition: $property $duration $ease;
  transition: $property $duration $ease;
}

@mixin transition-simple($property, $duration) {
  -webkit-transition: $property $duration;
  -moz-transition: $property $duration;
  -o-transition: $property $duration;
  transition: $property $duration;
}

@mixin box-sizing {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -o-box-sizing: border-box;
  -ms-box-sizing: border-box;
  box-sizing: border-box;
}

@mixin rotate($deg) {
  -moz-transform: rotate($deg);
  -o-transform: rotate($deg);
  -webkit-transform: rotate($deg);
  transform: rotate($deg);
}

@mixin display-inline-block {
  display: inline-block;
  // IE7 fix for display: inline-block
  zoom: 1;
  *display: inline;
}

/* See http://mrdanadams.com/2012/pixel-ems-css-conversion-sass-mixin/ */

/* Convert PX units to EMs.
Ex: margin-right: pem(16);
*/
@function pem($pxval, $base: $base-font-size) {
  @return #{$pxval / $base}em;
}

/* Used to convert PX to EMs for multiple properties or values or both.
$base is an optional measurement that allows making measurements relative to the parent font size rather than the current. Also accepts a list of lists (instead a list of values) for properties that accept multiple lists of values. Only numbers of converted; everything else is passed through.

Examples:

@include scale(line-height, 30)
@include scale(line-height, 30, 16)
@include scale(width height, 125);
@include scale(padding, 0 25, 16);
@include scale(text-shadow, (#0d6e28 1 1) (#777 0 0 2), 16);
@include scale(box-shadow, (inset 0 0 0 1 #2a9022) (inset 0 0 3 #459966), 16);
*/
@mixin scale($props, $sizes, $base: $base-font-size) {
    $values: ();
    $sublists: false;
    @each $s in $sizes {
        /* unwrap lists for values that have multiple list of values such as text-shadow */
        @if type-of($s) == list {
            $sublists: true;
            $vv: ();
            @each $ss in $s {
                $vv: append($vv, if(type-of($ss) == number, #{$ss / $base}em, $ss));
            }
            $values: append($values, join((), $vv));
        } @else {
            $values: append($values, if(type-of($s) == number, #{$s / $base}em, $s));
        }
    }
    $value: join((), $values, if($sublists, comma, space));
    @each $prop in $props { #{$prop}: $value }
}